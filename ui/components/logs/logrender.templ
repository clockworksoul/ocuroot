package logs

import (
	"github.com/ocuroot/ocuroot/store/models"
	"regexp"
	"strings"
)

// ANSI color and style codes
var (
	ansiColorRegex = regexp.MustCompile(`\x1b\[(\d+;?)+m`)

	// Color mapping for common ANSI color codes
	foregroundColorMap = map[string]string{
		"30": "text-black",
		"31": "text-red-500",
		"32": "text-green-500",
		"33": "text-yellow-500",
		"34": "text-blue-500",
		"35": "text-purple-500",
		"36": "text-cyan-500",
		"37": "text-white",
		"90": "text-gray-500",
		"91": "text-red-300",
		"92": "text-green-300",
		"93": "text-yellow-300",
		"94": "text-blue-300",
		"95": "text-purple-300",
		"96": "text-cyan-300",
		"97": "text-white",
	}

	backgroundColorMap = map[string]string{
		"40":  "bg-black",
		"41":  "bg-red-500",
		"42":  "bg-green-500",
		"43":  "bg-yellow-500",
		"44":  "bg-blue-500",
		"45":  "bg-purple-500",
		"46":  "bg-cyan-500",
		"47":  "bg-white",
		"100": "bg-gray-500",
		"101": "bg-red-300",
		"102": "bg-green-300",
		"103": "bg-yellow-300",
		"104": "bg-blue-300",
		"105": "bg-purple-300",
		"106": "bg-cyan-300",
		"107": "bg-white",
	}
)

// ColorSegment represents a segment of log content with its color class
type ColorSegment struct {
	Content         string
	ForegroundClass string
	BackgroundClass string
}

// parseLogColorSegments breaks log content into colored segments
func parseLogColorSegments(content string) []ColorSegment {
	if !ansiColorRegex.MatchString(content) {
		return []ColorSegment{{Content: content, ForegroundClass: "", BackgroundClass: ""}}
	}

	// Split content by color codes
	parts := ansiColorRegex.Split(content, -1)
	codes := ansiColorRegex.FindAllString(content, -1)
	var segments []ColorSegment
	var currentForegroundClass, currentBackgroundClass string

	for i, part := range parts {
		// Skip empty parts
		if part == "" {
			continue
		}

		// Determine color class from previous color code
		if i > 0 && i-1 < len(codes) {
			colorCodeRegex := regexp.MustCompile(`\d+`)
			matches := colorCodeRegex.FindAllString(codes[i-1], -1)
			for _, match := range matches {
				if class, exists := foregroundColorMap[match]; exists {
					currentForegroundClass = class
				}
				if class, exists := backgroundColorMap[match]; exists {
					currentBackgroundClass = class
				}
			}
		}

		// Add segment
		segments = append(segments, ColorSegment{
			Content:         part,
			ForegroundClass: currentForegroundClass,
			BackgroundClass: currentBackgroundClass,
		})
	}

	return segments
}

func buildLogColorClasses(segment ColorSegment) []string {
	classes := []string{}
	if segment.ForegroundClass != "" {
		classes = append(classes, segment.ForegroundClass)
	}
	if segment.BackgroundClass != "" {
		classes = append(classes, segment.BackgroundClass)
	}
	return classes
}

// ColoredLogContent renders a log content segment with color classes
templ ColoredLogContent(content string) {
	{{ segments := parseLogColorSegments(content) }}
	for _, segment := range segments {
		{{ classes := buildLogColorClasses(segment) }}
		if len(classes) > 0 {
			<span class={ strings.Join(classes, " ") }>{ segment.Content }</span>
		} else {
			{ segment.Content }
		}
	}
}

func StreamName(stream int) string {
	switch stream {
	case 0:
		return "stdin"
	case 1:
		return "stdout"
	case 2:
		return "stderr"
	default:
		return "unknown"
	}
}

// LogRender renders individual log entries with ANSI color support
templ LogRender(logs []models.Log, extraColumns ...string) {
	for _, log := range logs {
		<div class="log-entry font-mono flex items-baseline whitespace-nowrap" data-stream={ StreamName(log.Stream) }>
			<span class="log-timestamp text-gray-500 pr-4 mr-4 border-r border-gray-300 text-right min-w-[120px] flex-shrink-0">{ log.Timestamp.Format("2006-01-02 15:04:05") }</span>
			for _, extraColumn := range extraColumns {
				<span class="log-extra-column text-gray-500 pr-4 mr-4 border-r border-gray-300 text-right min-w-[120px] flex-shrink-0">{ log.Attributes[extraColumn] }</span>
			}
			<span class="log-content">
				@ColoredLogContent(log.Message)
			</span>
		</div>
	}
}
