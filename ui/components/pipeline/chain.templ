package pipeline

import (
	"fmt"
	"github.com/ocuroot/ocuroot/ui/components"
	"github.com/ocuroot/ocuroot/ui/components/keyvalue"
	"github.com/ocuroot/ocuroot/ui/components/logs"
	"github.com/ocuroot/ocuroot/ui/components/mermaid"
	"github.com/ocuroot/ocuroot/store/models"
	"time"
)

// RenderChain renders a function chain with its functions
templ RenderChain(chain *models.FunctionChainSummary, phaseStatus models.SummarizedStatus, phase models.PhaseSummary) {
	<div class="border border-gray-200 rounded mb-2 bg-white overflow-hidden">
		<div class="bg-gray-50 px-3 py-2 border-b flex justify-between items-center">
			<div class="font-medium flex items-center">
				if chain.Name == "Setup" || (phase.ID != "" && len(phase.Work) > 0 && phase.Work[0].Chain != nil && phase.Work[0].Chain.ID == chain.ID) {
					<!-- Setup phase icon: fast-forward arrow -->
					<svg class="h-4 w-4 text-gray-700 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
						<polygon points="13 19 22 12 13 5 13 19"></polygon>
						<polygon points="2 19 11 12 2 5 2 19"></polygon>
					</svg>
					<span class="font-semibold text-gray-800">Setup</span>
				} else if chain.Name == "Test" || (phase.ID != "" && len(phase.Work) > 1 && phase.Work[1].Chain != nil && phase.Work[1].Chain.ID == chain.ID) {
					<!-- Test phase icon: lab beaker -->
					<svg class="h-4 w-4 text-gray-700 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
						<path d="M10 2v7.31"></path>
						<path d="M14 9.3V2"></path>
						<path d="M8.5 2h7"></path>
						<path d="M14 9.3a6 6 0 1 1-4 0"></path>
					</svg>
					<span class="font-semibold text-gray-800">Test</span>
				} else if len(phase.Work) > 0 {
					<!-- Look for matching work with environment -->
					for _, work := range phase.Work {
						if work.Chain != nil && work.Chain.ID == chain.ID && work.Environment != nil {
							<!-- Environment icon: cloud -->
							<svg class="h-4 w-4 text-gray-700 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<path d="M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9z"></path>
							</svg>
							<span class="font-semibold text-gray-800">{ work.Environment.Name }</span>
						}
					}
				} else {
					<!-- Default icon and title -->
					<svg class="h-4 w-4 text-gray-700 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
						<path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path>
					</svg>
					<span class="font-semibold text-gray-800">{ chain.Name }</span>
				}
			</div>
			<div class="flex items-center">
				@MapSummarizedStatusToProgress(chain.Status())
			</div>
		</div>
		<div class="p-2">
			if len(chain.Functions) > 0 {
				for i, function := range chain.Functions {
					@RenderFunction(function, chain.Status())
					<!-- Add connector line between functions -->
					if i < len(chain.Functions)-1 {
						<svg width="2" height="16" class="mx-auto my-0">
							<line x1="1" y1="0" x2="1" y2="16" stroke="#D1D5DB" stroke-width="2" stroke-linecap="round"></line>
						</svg>
					}
				}
				<!-- Show mermaid graph for in-progress chains -->
				if chain.Status() == models.SummarizedStatusRunning || chain.Status() == models.SummarizedStatusReady || chain.Status() == models.SummarizedStatusPending {
					if len(chain.Functions) > 0 {
						<!-- Mermaid graph -->
						<div class="mt-4">
							@mermaid.FunctionChainDiagram(chain, true)
						</div>
					}
				}
			} else {
				<div class="text-sm text-gray-500 italic p-1">No functions</div>
			}
		</div>
	</div>
}

// RenderFunction renders a single function with its status
templ RenderFunction(fn *models.FunctionSummary, chainStatus models.SummarizedStatus) {
	@modalsForFunction(fn)
	<!-- Function card -->
	<div class={ fmt.Sprintf("border-l-4 px-3 py-2 mb-1 %s", getFunctionBorderClass(statusFromSummarized(fn.Status))) }>
		<div class="flex justify-between items-start">
			<div class="w-full">
				<!-- Inputs count -->
				if len(fn.Inputs) > 0 {
					<div
						class="text-xs text-gray-500 text-center py-2 px-3 cursor-pointer hover:bg-gray-100 rounded transition-colors flex items-center justify-center"
						onclick={ components.OpenModal(fmt.Sprintf("var-modal-inputs-%s", fn.ID)) }
					>
						{ fmt.Sprintf("%d Input%s", len(fn.Inputs), ternary(len(fn.Inputs) != 1, "s", "")) }
						<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 ml-1 text-gray-400 group-hover:text-gray-600 transition-colors duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</div>
					<!-- Dotted line below inputs -->
					<div class="border-t border-dashed border-gray-300 my-2"></div>
				}
				<div class="py-3 relative">
					<!-- Function Name with Logs Icon -->
					<div class="flex justify-center items-center">
						<div class="font-medium text-base">{ fmt.Sprint(fn.Fn.Name) }</div>
						<div
							class="absolute top-0 right-0 text-gray-500 hover:text-gray-700 cursor-pointer"
							onclick={ components.OpenModal(fmt.Sprintf("log-modal-%s", fn.ID)) }
						>
							<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
							</svg>
						</div>
					</div>
				</div>
				<!-- Dotted line above outputs -->
				if len(fn.Outputs) > 0 {
					<div class="border-t border-dashed border-gray-300 my-2"></div>
					<div
						class="text-xs text-gray-500 text-center py-2 px-3 cursor-pointer hover:bg-gray-100 rounded transition-colors flex items-center justify-center"
						onclick={ components.OpenModal(fmt.Sprintf("var-modal-outputs-%s", fn.ID)) }
					>
						{ fmt.Sprintf("%d Output%s", len(fn.Outputs), ternary(len(fn.Outputs) != 1, "s", "")) }
						<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 ml-1 text-gray-400 group-hover:text-gray-600 transition-colors duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</div>
				}
			</div>
		</div>
	</div>
}

templ modalsForFunction(fn *models.FunctionSummary) {
	if len(fn.Inputs) > 0 {
		<!-- Inputs Modal -->
		@components.Modal(fmt.Sprintf("var-modal-inputs-%s", fn.ID), "Function Inputs") {
			@keyvalue.FromInputMap(fn.Inputs)
		}
	}
	if len(fn.Outputs) > 0 {
		<!-- Outputs Modal -->
		@components.Modal(fmt.Sprintf("var-modal-outputs-%s", fn.ID), "Function Outputs") {
			@keyvalue.FromVarMap(fn.Outputs)
		}
	}
	<!-- Log Modal -->
	@components.Modal(fmt.Sprintf("log-modal-%s", fn.ID), fmt.Sprintf("Logs for %s", fn.Fn.Name), "full") {
		@logs.LogView(fmt.Sprintf("/components/logstream?timestamp=%d", time.Now().Unix()), fmt.Sprintf("log-modal-content-%s", fn.ID))
	}
}
